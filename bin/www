#!/usr/bin/env node

/**
 * Module dependencies.
 */

const url = require('url');
var HLSServer = require('hls-server')
var debug = require('debug')('adminlte-node.js:server');
var http = require('http');

var app = require('../app');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// var hls = new HLSServer(server, { // hls server
// 	provider: {
// 		exists: function(req, cb) { // all request
// 			var uri = url.parse(req.url).pathname
// 			var extension = path.extname(uri)
// 			if (extension != '.m3u8' && extension != '.ts') {
// 				return cb(null, true);
// 			}
// 			console.log('exists function called');
// 			var uri = url.parse(req.url).pathname;
// 			var fpath = audioPath + uri;
// 			fs.access(fpath, fs.constants.F_OK, function(err) {
// 				if (err) {
// 					console.log('File not exist', fpath);
// 				}
// 				cb(null, !err);
// 			});
// 		},
// 		getManifestStream: function(req, cb) { // extension == .m3u8
// 			var uri = url.parse(req.url).pathname;
// 			console.log('getManifestStream function called:', req.url, uri);
// 			var ext = uri.split('.').pop();
// 			var filePath = audioPath + uri;
// 			var tsFileStream = fs.createReadStream(filePath);
// 			cb(null, tsFileStream);
// 		},
// 		getSegmentStream: function(req, cb) { // extension == .ts
// 			var uri = url.parse(req.url).pathname;
// 			console.log('getSegmentStream function called:', req.url, uri);
// 			var ext = uri.split('.').pop();
// 			if (ext == 'ts') {
// 				var filePath = audioPath + uri;
// 				var tsFileStream = fs.createReadStream(filePath);
// 				cb(null, tsFileStream);
// 			}
// 		}
// 	}
// });
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
